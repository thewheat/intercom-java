import org.ajoberstar.grgit.Grgit
import java.text.SimpleDateFormat

final publicationVersion = new Version(version)
def rawVersion = version

group = 'org.thewheatfield'
version = publicationVersion
status = version.status
ext.publish = true


task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar, javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact sourcesJar {
        classifier "sources"
      }

      artifact javadocJar {
        classifier "javadoc"
      }
    }
  }
}


bintray {
  // gradle apslodes if the bintray* props aren't found and we never run this task in circle
  if (System.getenv('release') != null) {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
  }
  publications = ['mavenJava']
  dryRun = false
  publish = project.publish
  pkg {
    repo = 'TestMaven'
    userOrg = 'intercomtest'
    name = 'test-java'
    desc = 'Java bindings for the Intercom API'
    websiteUrl = 'https://github.com/thewheat/intercom-java'
    issueTrackerUrl = 'https://github.com/thewheat/intercom-java/issues'
    vcsUrl = 'https://github.com/thewheat/intercom-java.git'
    licenses = ['Apache-2.0']
    labels = ['intercom', 'java', 'api']
    publicDownloadNumbers = true
    //noinspection GroovyAssignabilityCheck
    version {
      name = publicationVersion
      vcsTag = publicationVersion
    }
  }
}

ext.repo = Grgit.open(project.file('..'))

task printVersion << {
  println "publication version: ${publicationVersion}"
  println "raw version: ${rawVersion}"
}

task tagRelease << {
  repo.tag.add {
    name = publicationVersion
    message = "Release of ${rawVersion}"
  }
  repo.push(tags: true)
}

/*
  export release=1 && gradle publishRelease
*/
task publishRelease(dependsOn: ['clean', 'tagRelease', 'bintrayUpload'])
tagRelease.mustRunAfter clean
bintrayUpload.mustRunAfter tagRelease


/**
 * A version object for use in the publication and tagging tasks.
 * If the version ends with SNAPSHOT, that will be replaced with a timestamp.
 *
 * Based on https://github.com/bintray/bintray-examples
 */
class Version {
  //
  String originalVersion
  String thisVersion
  String status
  Date buildTime

  Version(String versionValue) {
    buildTime = new Date()
    originalVersion = versionValue
    if (originalVersion.endsWith('-SNAPSHOT')) {
      status = 'integration'
      thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
    } else {
      status = 'release'
      thisVersion = versionValue
    }
  }

  String getTimestamp() {
    // Convert local file timestamp to UTC
    def format = new SimpleDateFormat('yyyyMMddHHmmss')
    format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
    return format.format(buildTime)
  }

  String toString() {
    thisVersion
  }
}
